from random import randrange, randint
from sys import exit

class game():
    def __init__(self):
        self.playerScore = 0
        self.computerScore = 0
        self.ties = 0
        self.bestOf = 0
    
    def score(self, playerPoints, computerPoints, tiePoints):
        game.playerScore += playerPoints
        game.computerScore += computerPoints
        game.ties += tiePoints
        if game.playerScore + game.computerScore + game.ties < game.bestOf:
            print "Current score:\nPlayer :", game.playerScore, "Computer: ", game.computerScore
            if game.playerScore == game.computerScore:
                print "Player and computer are tied!"
            elif game.playerScore > game.computerScore:
                print "Player leads!"
            else:
                print "Computer leads!"
            game.next_round()
        else:
            if game.playerScore > game.computerScore:
                print "Player wins the game with a score of ", game.playerScore, "out of ", game.bestOf, "!"
            elif game.playerScore < game.computerScore:
                print "Computer wins the game with a score of ", game.computerScore, "out of ", game.bestOf, "!"
            elif game.playerScore == game.computerScore:
                print "Player and Computer tie the game at ", game.playerScore, "-", game.computerScore
                print "\n It's time for the bonus round!"
                bonus = bonus()
    
    def name_to_number(self, name):
        name = name.lower()
        names = {"rock" : 0, "spock" : 1, "paper" : 2, "lizard" : 3, "scissors" : 4}
        try:
            return names[name]
        except KeyError:
            print "\nERROR : ", name, "is not an accepted entry.\nEntry must be rock, spock, paper, lizard, or scissors."
            exit(0)
            
    def number_to_name(self, number):
        numbers = {0 : "rock", 1 : "Spock", 2 : "paper", 3 : "lizard", 4 : "scissors"}
        return numbers[number]
    
    def next_round(self):
        playerChoice = raw_input("\nInput your choice (rock, Spock, paper, lizard, scissors) : ")
        game.rpsls(playerChoice)
    
    def rpsls(self, name):
        game.bestOf = bestOf
        playerNum = game.name_to_number(name)
        computerNum = randrange(0, 5)
        
        print "Player chooses", name
        print "Computer chooses", game.number_to_name(computerNum)
        
        diff = (playerNum - computerNum) % 5
        
        if diff == 0:
            print "Player and computer tie!\n"
            game.score(0,0,1)
        elif diff <= 2:
            print "Player wins!\n"
            game.score(1,0,0)
        elif diff >= 3:
            print "Computer wins!\n"
            game.score(0,1,0)
class bonus():
    def __init__(self):
        print "Bonus Round: High or Low!\n"
        print "Both players start the game with 5 coins. Every round of the game costs one coin. You will be presented with a card, you must choose whether you think the next drawn card is higher or lower."
        print "If you choose correctly you win 5 coins. You can then choose to try to double your winnings in a game of heads or tails. If you choose right you win 5 extra coins, if you choose wrong you lose your winnings."
        print "The game ends when one either runs out of coins or has a total of 20 coins."
        self.playerTot = 5
        self.computerTot = 5
        
    def heads_or_tails(self):
        sidesToNumbers = {"heads" : 1, "tails" : 2}
        numbersToSides = {1 : "heads", 2 : "tails"}
        print "Bonus Round: Heads or Tails!\n"
        playerSide = raw_input("Choose heads or tails : ")
        playerSide.lower().lstrip().rstrip()
        playerNum = sidesToNumbers[playerSide]
        print "Player chooses ", playerSide
        winner = randint(1, 2)
        if playerNum == winner:
            print "Tossed coin: ", numbersToSides[winner]
            print "Player wins, winnings doubled!"
            print "Player earns 10 coins."
            return 1
        else:
            print "Tossed coin: ", numbersToSides[winner]
            print "Player loses, gains no winnings."
            return 0
    
    def bonus_round(self):
        cards = {1 : "Ace", 11 : "Jack", 12 : "Queen", 13 : "King"}
        return 1
        
if __name__ == '__main__' :
        game = game()
        bestOf = int(raw_input("Input the number of rounds you wish to play: "))
        playerChoice = raw_input("Input your choice (rock, Spock, paper, lizard, scissors) to begin playing : ")
        game.bestOf = bestOf
        game.rpsls(playerChoice)
 